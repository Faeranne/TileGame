$(function(){window.action=action=new Object;action.functions={};action.add=function(name,fn){action.functions[name]=fn};action.do=function(){var args=Array.prototype.slice.call(arguments);var name=args.shift();if(!action.functions[name]){console.log("No action with name "+name+" found.");return}action.functions[name].apply(args)};action.callback=function(){var args=Array.prototype.slice.call(arguments);var name=args.shift();if(!action.functions[name]){console.log("No action with name "+name+" found.");return function(){alert("No Such action "+name)}}return function(name,args){return function(){action.functions[name].apply(args)}}(name,args)}});$(function(){window.engine=engine=new Object;engine.tileWidth=16;engine.tileHeight=16;engine.canvas=null;engine.context=null;engine.setCanvas=function(query){engine.canvas=document.querySelector(query);return engine};engine.setContext=function(){engine.context=engine.canvas.getContext("2d");return engine};engine.setTiles=function(w,h){engine.tileWidth=w;engine.tileHeight=h;return engine};engine.setup=function(){loop.add(map.drawMap);loop.add(entities.update);loop.add(entities.draw);loop.add(function(){input.inputLoop()});loop.add(gamepad.update);return engine}});$(function(){window.entities=entities=new Object;entities.entitiesList=[];entities.newEntity=function(sprite,w,h,x,y,setup){var temp=new Object;temp.xOffset=0;temp.yOffset=0;temp.x=0;temp.y=0;temp.xMap=x||0;temp.yMap=y||0;temp.width=w||10;temp.height=h||20;temp.lockOffsetX=0;temp.lockOffsetY=0;temp.sprite=sprite;temp.viewLock=false;temp.animationDirection=null;temp.animating=false;temp.animationCount=0;temp.draw=function(){engine.context.fillStyle=temp.sprite.color;engine.context.fillRect(temp.x,temp.y,temp.width,temp.height);return temp};temp.offset=function(x,y){temp.xOffset=x;temp.yOffset=y;return temp};temp.interaction=null;temp.interact=function(){action.do(temp.interaction)};temp.setInteraction=function(name){temp.interaction=name};temp.update=function(){temp.x=temp.xMap*engine.tileWidth+temp.xOffset;temp.y=temp.yMap*engine.tileHeight+temp.yOffset;if(!temp.viewLock){temp.x+=map.mapOffsetX*engine.tileWidth;temp.y+=map.mapOffsetY*engine.tileHeight}else{temp.x+=temp.lockOffsetX;temp.y+=temp.lockOffsetY}if(temp.animating){if(temp.animationCount>0){if(temp.animationDirection=="+x"){temp.xOffset++}if(temp.animationDirection=="-x"){temp.xOffset--}if(temp.animationDirection=="+y"){temp.yOffset++}if(temp.animationDirection=="-y"){temp.yOffset--}temp.animationCount--}else{temp.animationCount=0;temp.animating=false}}return temp};temp.move=function(x,y,static){if(x>0){temp.animationDirection="+x"}if(x<0){temp.animationDirection="-x"}if(y>0){temp.animationDirection="+y"}if(y<0){temp.animationDirection="-y"}if(!temp.animating){var coliding=entities.checkColision(temp.xMap+x,temp.yMap+y);if(coliding!=null){if(coliding.solid){return}}if(!map.checkColision(temp.solid,temp.xMap+x,temp.yMap+y)){entities.updateMap(temp.xMap,temp.yMap,x,y,temp);temp.xMap+=x;temp.yMap+=y;if(!static){temp.animating=true;if(x>0){temp.xOffset-=engine.tileWidth;temp.animationCount=engine.tileWidth}if(x<0){temp.xOffset+=engine.tileWidth;temp.animationCount=engine.tileWidth}if(y>0){temp.yOffset-=engine.tileHeight;temp.animationCount=engine.tileHeight}if(y<0){temp.yOffset+=engine.tileHeight;temp.animationCount=engine.tileHeight}}}}return temp};temp.makeSolid=function(solid){temp.solid=solid;return temp};temp.lockToViewport=function(lock,x,y){temp.viewLock=lock;if(x){temp.lockOffsetX=x}if(y){temp.lockOffsetY=y}return temp};if(typeof setup=="function"){setup(temp)}entities.entitiesList.push(temp);return temp};entities.draw=function(){for(var i=0;i<entities.entitiesList.length;i++){entities.entitiesList[i].draw(engine.context)}};entities.update=function(){for(var i=0;i<entities.entitiesList.length;i++){entities.entitiesList[i].update()}};entities.map=[];entities.updateMap=function(oldX,oldY,newX,newY,entity){if(!entities.map){entities.map=[]}if(!entities.map[oldX]){entities.map[oldX]=[]}entities.map[oldX][oldY]=null;if(!entities.map[newX]){entities.map[newX]=[]}entities.map[newX][newY]=entity};entities.getXY=function(x,y){if(entities.map[x]&&entities.map[x][y]){return entities.map[x][y]}else{return null}};entities.checkColision=function(x,y){return entities.getXY(x,y)}});$(function(){window.gamepad=gamepad=new Object;gamepad.actions=[];window.addEventListener("gamepadconnected",function(e){gamepad.pad=e.gamepad;gamepad.connected=true;console.log("bound to controller id: "+e.gamepad.id)});gamepad.update=function(){if(!gamepad.connected&&input.enabled){return false}for(var i=0;i<gamepad.pad.buttons.length;i++){if(gamepad.pad.buttons[i].pressed){if(gamepad.debugging){console.log("button "+i+" pressed")}if(gamepad.actions[i]){action.do(gamepad.actions[i])}}}};gamepad.addButton=function(button,action){gamepad.actions[button]=action};gamepad.debug=function(){gamepad.debugging=true}});$(function(){window.input=input=new Object;input.enabled=true;input.setCommand=function(callback){this.inputLoop=action.callback(callback);return this};input.releaseCommand=function(){this.inputLoop=function(){};return this};input.enable=function(){input.enabled=true};input.disable=function(){input.enabled=false};input.inputLoop=function(){}});$(function(){window.keyboard=keyboard=new Object;keyboard.attachCommand=function(key,callback){window.addEventListener("keydown",function(key,callback){return function(e){if(e.keyCode==key&&input.enabled){input.setCommand(callback)}}}(key,callback),false);window.addEventListener("keyup",function(key){return function(e){if(e.keyCode==key){input.releaseCommand()}}}(key),false);return this};keyboard.debug=function(){window.addEventListener("keydown",function(e){console.log("keycode "+e.keyCode+" pressed")},false)}});var load={};load.inProgress=0;load.maps={};load.tiles={};load.sprites={};load.Map=function(json){map.setMap(json.map);entities.clear();for(ent in json.entities){var entity=json.entities[ent];entities.new(entity.sprite,entity.w,entity.h,entity.xOff,entity.yOff,function(entit){entit.move(entity.x,entity.y,true);entit.setInteraction(entity.interact);entit.makeSolid(entity.solid)})}player.create(json.player.sprite);player.move(json.player.x,json.player.y,true)};load.getMap=function(url){load.inProgress++;var req=new XMLHttpRequest;req.onload=function(){var json=JSON.parse(this.responseText);load.maps[json.name]=json;load.inProgress--};req.open("get",url,true);req.send()};load.getSprite=function(url){load.inProgress++;var req=new XMLHttpRequest;req.onload=function(){var json=JSON.parse(this.responseText);load.sprites[json.name]=json;load.inProgress--};req.open("get",url,true);req.send()};load.getTile=function(url){load.inProgress++;var req=new XMLHttpRequest;req.onload=function(){var json=JSON.parse(this.responseText);load.tiles[json.name]=json;load.inProgress--};req.open("get",url,true);req.send()};load.executeLoaded=function(cb){var i=setInterval(function(){if(load.inProgress){return}else{clearInterval(i);cb()}})};$(function(){window.loop=loop=new Object;loop.functions=[];loop.add=function(fn){loop.functions.push(fn)};loop.call=function(){for(var i=0;i<loop.functions.length;i++){loop.functions[i]()}window.requestAnimationFrame(loop.call)}});$(function(){window.map=map=new Object;map.drawMap=function(){var workingMap=map.currentMap;var tileSheet=workingMap.tileSheet;for(var i=0;i<workingMap.tiles.length;i++){for(var j=0;j<workingMap.tiles[i].length;j++){engine.context.fillStyle=tileSheet[workingMap.tiles[i][j][1]].color;engine.context.fillRect(j*engine.tileHeight,i*engine.tileWidth,engine.tileHeight,engine.tileWidth)}}};map.currentMap=null;map.mapOffsetX=0;map.mapOffsetY=0;map.setMap=function(newMap){map.currentMap=newMap};map.checkColision=function(solid,x,y){if(!solid){return false}if(typeof map1.tiles[y]=="undefined"){return true}if(typeof map1.tiles[y][x]=="undefined"){return true}if(map1.tiles[y][x][0].solid){return true}}});$(function(){window.player=player=new Object;player.entity=null;player.create=function(sprite){player.entity=entities.newEntity(sprite);player.entity.xOffset=3;player.entity.yOffset=-4;player.entity.makeSolid(true)};player.move=function(x,y){player.entity.move(x,y)};player.interact=function(){var x=0;var y=0;if(player.entity.animationDirection=="+x"){x=1}if(player.entity.animationDirection=="-x"){x=-1}if(player.entity.animationDirection=="+y"){y=1}if(player.entity.animationDirection=="-y"){y=-1}var toCheck=entities.getXY(player.entity.xMap+x,player.entity.yMap+y);if(toCheck!=null){toCheck.interact()}}});